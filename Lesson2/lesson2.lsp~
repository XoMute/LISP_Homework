;; TESTS
;; 1 task

(defun check-create-set (input item expected)
  (let ((result) (funcall (create-set input) item))
    (eq result expected)))

(defun test-create-set (name input item expected)
  (or (check-create-set input item expected)
      (format T "~A failed.~%" name)))

(defun run-create-set-tests ()
  (test-create-set "create-set-1" nil 10 nil)
  (test-create-set "create-set-2" '(10) 10 T)
  (test-create-set "create-set-3" '(10) 21 nil)
  (test-create-set "create-set-4" '(10 15) 10 T)
  (test-create-set "create-set-5" '(10 15) 15 T)
  (test-create-set "create-set-6" '(10 15) 21 nil)
  (test-create-set "create-set-7" '(10 15 21) 21 T)
  (test-create-set "create-set-8" '(10 15 21) 0 nil))
  
  
  
